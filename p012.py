# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# 1. My solution
#   using a generator for the fun of it
#   and pyprimesieve for speed

from pyprimesieve import factorize

def triangle_numbers():
	n = 1
	s = 1
	while True:
		yield s
		n += 1
		s += n

def first_triangle_number_with_divisor_count_over(bound):
	for n in triangle_numbers():
		prime_factors = factorize(n)
		divisors_count = 1
		for (prime, power) in prime_factors:
			divisors_count *= power + 1
		if divisors_count > bound:
			return n

print( first_triangle_number_with_divisor_count_over(500) )